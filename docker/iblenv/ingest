#! /bin/bash --login

# IBL Ingestion Entrypoint Script
# ===============================

err_exit() {
    echo "#! Error: $*"
    exit 1
}

script_cmd="${BASH_SOURCE[0]}"
script_path="$(cd "$(dirname ${script_cmd})" &>/dev/null && pwd)"
script_file=$(basename "${script_cmd}")
shell_dir=$PWD

SHOW_HELP=0
OPS_SEQ=()

[[ -z "${IBL_PATH_ROOT}" ]] && err_exit "IBL_PATH_ROOT is empty"
[[ -z "${IBL_PATH_DATA}" ]] && err_exit "IBL_PATH_DATA is empty"
[[ -z "${IBL_PATH_SHARED}" ]] && err_exit "IBL_PATH_SHARED is empty"
[[ -z "$CONDA_ENV_USER" ]] && CONDA_ENV_USER=base
[[ -z "${JUPYTER_PORT}" ]] && JUPYTER_PORT=10000
[[ -z "${JUPYTER_TOKEN}" ]] && JUPYTER_TOKEN=IBLt0k

init_dot_py=/usr/local/bin/config_init.py
CFG_INIT_ARGS=()
INIT_CFG_ARGS=

show_help() {
    echo "usage: $script_file [OPTION]... FUNC/ROUTINE... [-- EXEC_CMD]

Entrypoint for ingestion routines

Options:

--jupytertok=JUPYTER_TOKEN ... Token to use when connecting to a jupyterlab server
--jupyterport=JUPYTER_PORT ... Port to use for a new Jupyter Lab session

Functions:

dev .............. Initialize parent process and wait indefinitely
copy_one_params .. Copy 'local.one_params' parameters file from shared to home dir
init_cfg ......... Init configuration files for Alyx and DataJoint


Environment Variables:

  IBL_PATH_ROOT=$IBL_PATH_ROOT
  IBL_PATH_ALYX=$IBL_PATH_ALYX
  IBL_PATH_DATA=$IBL_PATH_DATA

Examples:

 Start a dev container

   $script_file dev

"
    exit 0
}

while [[ $# -gt 0 ]]; do
    case "$1" in
    --jupytertok=*)
        JUPYTER_TOKEN="${1#*=}"
        echo "--jupytertok passed. Using token: '$JUPYTER_TOKEN'"
        shift
        ;;
    --jupyterport=*)
        JUPYTER_PORT="${1#*=}"
        echo "--jupyterport passed. Using port: '$JUPYTER_PORT'"
        shift
        ;;
    --initargs=*)
        INIT_CFG_ARGS="${1#*=}"
        echo "--initargs passed. Using args: '$INIT_CFG_ARGS'"
        shift
        ;;
    "help" | "--help" | "-h" | "--help")
        SHOW_HELP=1
        break
        ;;
    "dev")
        OPS_SEQ+=("dev")
        shift
        ;;
    "copy_one_params")
        OPS_SEQ+=("copy_one_params")
        shift
        ;;
    "init_cfg")
        OPS_SEQ+=("init_cfg")
        shift
        for arg in "$@"; do
            case "$1" in
            --alyxhost=*)
                CFG_INIT_ARGS+=("$1")
                shift
                ;;
            esac
        done
        ;;
    "start_jupyter")
        OPS_SEQ+=("start_jupyter")
        shift
        ;;
    "--")
        shift
        echo "Other command: $*"
        break
        ;;
    *)
        err_exit "Unknown option: $1"
        ;;
    esac
done

dev() {
    echo -e "starting development environment...\n"
    exec tail -f /dev/null
}

copy_one_params() {
    [[ -f "${IBL_PATH_SHARED}/local.one_params" ]] || alyx oneparams
    cp -fv "${IBL_PATH_SHARED}/local.one_params" ~/
}

start_jupyter() {
    echo "Jupyter link: http://127.0.0.1:${JUPYTER_PORT}/lab?token=${JUPYTER_TOKEN}"
    jupyter lab -y --no-browser --ip=0.0.0.0 --port=${JUPYTER_PORT} --ServerApp.token="${JUPYTER_TOKEN}"
}

init_cfg() {
    copy_one_params
    python $init_dot_py ${INIT_CFG_ARGS}
}

# Start operations ---------------------------------------------------------------------

# switch to appropriate python environment
[[ -z "${CONDA_ENV_USER}" ]] && CONDA_ENV_USER=base
conda activate $CONDA_ENV_USER

if [[ ${#OPS_SEQ[@]} -gt 0 ]]; then
    echo "# > operation sequence: ${OPS_SEQ[@]}"
    for fn in ${OPS_SEQ[@]}; do
        echo "---- ${fn}() ----"
        $fn
    done
fi

set -eo pipefail
exec -l "$@"
