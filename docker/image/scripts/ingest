#! /bin/bash --login

# IBL Ingestion Entrypoint Script
# ===============================

err_exit() {
	echo "#! Error: $*"
	exit 1
}

script_cmd="${BASH_SOURCE[0]}"
script_path="$(cd "$(dirname ${script_cmd})" &>/dev/null && pwd)"
script_file=$(basename "${script_cmd}")
shell_dir=$PWD

[[ -z "$CONDA_ENV_USER" ]] && CONDA_ENV_USER=base
[[ -z "${JUPYTER_PORT}" ]] && JUPYTER_PORT=10000
[[ -z "${JUPYTER_TOKEN}" ]] && JUPYTER_TOKEN=IBLt0k

config_init_dot_py=/usr/local/bin/config_init.py
populate_dot_py=/usr/local/bin/populate.py

SHOW_HELP=0
OPS_SEQ=()
CFG_INIT_ARGS=()
POPULATE_ARGS=()

show_help() {
	echo "usage: $script_file FUNC/ROUTINE [OPTION]... [-- EXEC_CMD]

Entrypoint for iblenv or ingestion routines

Functions:

one_params ....... Create a 'local.one_params' parameters file and save to home dir
config_init ...... Init configuration files for Alyx and DataJoint. Can pass args from
                   '${config_init_dot_py}' after command, e.g., config_init [OPTION]...
                   See examples section below.
populate ......... Run the python script '${populate_dot_py}'.
                   Can pass args to script if args are specified after 'populate'.
                   See examples section below.
jupyterlab ....... Start a jupyter lab server using the following link:
                   http://127.0.0.1:${JUPYTER_PORT}/lab?token=${JUPYTER_TOKEN}
dev .............. Wait indefinitely

Environment Variables:

  IBL_PATH_ROOT=${IBL_PATH_ROOT}
  IBL_PATH_ALYX=${IBL_PATH_ALYX}
  IBL_PATH_DATA=${IBL_PATH_DATA}
  IBL_PATH_SHARED=$IBL_PATH_SHARED

Examples:

 Start a dev container
   > $script_file dev

 Initialize configuration for Alyx and DataJoint
   > $script_file config_init --alyxhost=private --djcfg='${IBL_PATH_ROOT}/config.json'

 Run a populate task
   > $script_file populate behavior -b 5 --duration=0.5

 Start a jupyter lab server using custom token and port
   > $script_file jupyterlab --jupytertok=$JUPYTER_TOKEN --jupyterport=$JUPYTER_PORT
"
	exit 0
}

while [[ $# -gt 0 ]]; do
	case "$1" in
	"help" | "--help" | "-h" | "--help")
		SHOW_HELP=1
		break
		;;
	"dev")
		OPS_SEQ+=("run_dev")
		shift
		;;
	"config_init")
		OPS_SEQ+=("config_init")
		shift
		for arg in "$@"; do
			case "$1" in
			--alyxhost=* | --onepar=* | --djcfg=*)
				echo "config_init.py arg: '$1'"
				CFG_INIT_ARGS+=("$1")
				shift
				;;
			esac
		done
		;;
	"populate")
		OPS_SEQ+=("populate")
		shift
		for arg in "$@"; do
			case "$1" in
			ingest | behavior | wheel | ephys)
				POPULATE_ARGS+=("$1")
				shift
				;;
			--duration=* | --backtrack=* | --sleep=* | --xtable=* | --xplots)
				echo "populate.py arg: '$1'"
				POPULATE_ARGS+=("$1")
				shift
				;;
			-d)
				echo "populate.py arg: '-d $2'"
				POPULATE_ARGS+=("--duration=$2")
				shift
				shift
				;;
			-b)
				echo "populate.py arg: '-b $2'"
				POPULATE_ARGS+=("--backtrack=$2")
				shift
				shift
				;;
			-d)
				echo "populate.py arg: '-s $2'"
				POPULATE_ARGS+=("--sleep=$2")
				shift
				shift
				;;
			-x)
				echo "populate.py arg: '-x $2'"
				POPULATE_ARGS+=("--xtable=$2")
				shift
				shift
				;;
			esac
		done
		;;
	"jupyterlab")
		OPS_SEQ+=("jupyterlab")
		shift
		for arg in "$@"; do
			case "$1" in
			--jupytertok=*)
				JUPYTER_TOKEN="${1#*=}"
				echo "--jupytertok passed. Using token: '$JUPYTER_TOKEN'"
				shift
				;;
			--jupyterport=*)
				JUPYTER_PORT="${1#*=}"
				echo "--jupyterport passed. Using port: '$JUPYTER_PORT'"
				shift
				;;
			esac
		done
		;;
	"--")
		shift
		echo "Other command: $*"
		break
		;;
	*)
		err_exit "Unknown option: $1"
		;;
	esac
done

# show help if asked
# ------------------

[[ ${SHOW_HELP} -eq 1 ]] && show_help

[[ -z "${IBL_PATH_ROOT}" ]] && err_exit "IBL_PATH_ROOT is empty"
[[ -z "${IBL_PATH_DATA}" ]] && err_exit "IBL_PATH_DATA is empty"

run_dev() {
	echo -e "\nStarting development environment...\n"
	while :; do
		sleep 10
	done
}

run_function_seq() {
	local fn
	if [[ $# -gt 0 ]]; then
		echo "# > operation sequence: $*"
		for fn in "$@"; do
			echo "# >> ${fn}()"
			$fn
		done
	fi
}

one_params() {
	cat <<-EOF >~/local.one_params
		{
		    "ALYX_LOGIN": "${PGUSER}",
		    "ALYX_PWD": "${PGPASSWORD}",
		    "ALYX_URL": "http://localhost:${ALYX_PORT}",
		    "CACHE_DIR": null,
		    "HTTP_DATA_SERVER_LOGIN": "${HTTP_DATA_SERVER_LOGIN}",
		    "HTTP_DATA_SERVER_PWD": "${HTTP_DATA_SERVER_PWD}",
		    "HTTP_DATA_SERVER": "${HTTP_DATA_SERVER}"
		}
	EOF
}

config_init() {
	alyx configalyx
	one_params
	python $config_init_dot_py ${CFG_INIT_ARGS[@]}
}

populate() {
	python $populate_dot_py ${POPULATE_ARGS[@]}
}

jupyterlab() {
	echo "Jupyter link: http://127.0.0.1:${JUPYTER_PORT}/lab?token=${JUPYTER_TOKEN}"
	jupyter lab -y --no-browser --ip=0.0.0.0 \
		--port=${JUPYTER_PORT} --ServerApp.token="${JUPYTER_TOKEN}"
}

# Start operations ---------------------------------------------------------------------

# switch to appropriate python environment
conda activate $CONDA_ENV_USER

# run sequence of operations specified by user
run_function_seq "${OPS_SEQ[@]}"

# run rest of command
exec "$@"
